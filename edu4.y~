%{
#define YYSTYPE double
#include <stdio.h>
#include "edu4.tab.h"
#include "makeast.h"
  extern int yylex();
  extern int yyerror();
  %}
%token IDEN 
%token NUMBER
%token array
%token define
%token ELSE
%token IF
%token WHILE
%token compari
%token cricri
%token FOR

%%

program: union sentences;

union: decsen union 
| decsen;

decsen: define IDEN ';' 
| array IDEN'['NUMBER']' ';' 
| array IDEN'['IDEN']' ';'
|array IDEN'['NUMBER']''['NUMBER']'';' 
| array IDEN'['IDEN']''['IDEN']'';';

sentences: sentence sentences 
| sentence;

sentence: asastate 
| loopsen 
| brasen 
| forsen ;

asastate: IDEN '=' expression ';' {$$ = build_node2(ASSIGN, $1, $3);}
| IDEN'['NUMBER']' '=' expression ';' 
| IDEN'['IDEN']' '=' expression ';'
| IDEN'['NUMBER']''['NUMBER']' '=' expression ';'
| IDEN'['IDEN']''['IDEN']' '=' expression ';'
| IDEN cricri | cricri IDEN ;

expression : expression adsub term {$$ = build_node2(adsub, $1, $3);}
| term {$$ = build_node1($1)}; //わからぬ

term : term muldiv fact {$$ = build_node2(muldiv, $1, $3);}
| fact {$$ = builf_node1($1);};

fact : variable {$$ = build_node1($1);}
| '('expression')'; //?????

adsub: '+' | '-'; //?????
muldiv:'*' | '/'; //?????

variable: IDEN {$$ = build_ident_node(IDENT, yytext);}
| NUMBER {$$ = build_num_node(NUM, $1);}
| IDEN'['NUMBER']' //?????
| IDEN'['IDEN']'
| IDEN'['NUMBER']''['NUMBER']' 
| IDEN'['IDEN']''['IDEN']' ;

loopsen: WHILE '('condition')''{'sentences'}'{$$ = build_node2(WHILE, $3, $6);};

brasen: IF'('condition')''{'sentences'}'{$$ = build_node2(IF, $3, $6);};
| IF'('condition')''{'sentences'}'ELSE'{'sentences'}'{$$ = build_node3(IF, $3, $6, $10);};

forsen: FOR '('asastate  condition ';' asastate ')' '{'sentences'}'{$$ = build_node4(FOR, $3, $4, $6, $9);};

condition: expression compari expression {$$ = build_node2(compari, $1, $3);};

//compari: '=''=' | '<' | '>' | '<''=' | ">=";

%%
int main(void)
{
  if(yyparse()){
    fprintf(stderr, "Error\n");
    return 1;
  }
}
